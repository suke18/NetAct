if(qval){
gseaRes$qval = qvalue(gseaRes$pval)$qvalues
}
return(gseaRes)
}else{
l = permut_glist(GSDB, DElist, minSize = minSize, n_permutation = nperm)
return(l)
}
}else{
gseaRes = GSEA_new(GSDB, DElist, minSize = minSize, nperm = nperm, qval = qval)
return(gseaRes)
}
}
## TF selection step:
TF_Selection_old = function(GSEArslt, DErslt, qval = 0.05, GSDB) {
table = DErslt$table
degs = rownames(table[table$padj< 0.05, ])
tfs = GSEArslt$tf[which(GSEArslt$qval < qval)]
c = cal_coverage(tfs, GSDB, degs)
cat(length(tfs)," TFs found!\n")
cat(TF_list_IPA(tfs),"\n")
return(list(tfs=tfs, c=c, degs = degs))
}
cal_coverage = function(tfs, GSDB, degs) {
coverage = numeric(); All_targets = character()
ndegs = length(degs)
for (tf in tfs) {
All_targets = unique(c(All_targets, GSDB[[tf]]))
tmp_coverage = sum(All_targets %in% degs)/ ndegs
coverage=c(coverage, tmp_coverage)
}
names(coverage) = tfs
plot(coverage, col="red", type="o",pch=18)
return(coverage)
}
TF_list_IPA = function(tfs) {
return(paste(sort(tfs), collapse = ","))
}
## TF selection step:
TF_Selection = function(GSEArslt,qval = 0.05, compList = NULL, ntop = NULL) {
if(is.null(compList) | length(compList) == 1) {
tfs = TF_Selection_single(GSEArslt, qval = qval, ntop = ntop)
}else{
tfs = character()
i = 0
for(comp in compList){
i = i + 1
tfs_single = TF_Selection_single(GSEArslt[[i]], qval = qval, ntop = ntop)
tfs = c(tfs, tfs_single)
}
tfs = sort(unique(tfs))
}
return(tfs)
}
TF_Selection_single = function(GSEArslt, qval = 0.05, ntop = NULL) {
data_rslt = GSEArslt[order(GSEArslt[,7], GSEArslt[,6], decreasing = c(FALSE, TRUE)),]
tfs = as.character(data_rslt$tf[data_rslt$qvals < qval])
if(!is.null(ntop)){
if(length(tfs) > ntop){
tfs = tfs[1:ntop]
}
}
tfs = sort(tfs)
return(tfs)
}
gsearslt_1 = read.csv("vignettes/results_v3_1.csv")
gsearslt_2 = read.csv("vignettes/results_v3_2.csv")
gsearslt_3 = read.csv("vignettes/results_v3_3.csv")
gsearslts = list(gsearslt_1, gsearslt_2, gsearslt_3)
tfs = TF_Selection(gsearslts, qval = 0.01, compList = compare_list, ntop = NULL)
tfs
TF_Selection
TF_Selection_single
gsearslt_1
tfs
act.me <- TF_Activity(tfs, hDB, neweset, DErslt$Overall)
act.me$all_list
acts_mat = act.me$all_activities
Combine_heatmap(acts_mat, neweset)
BiocManager::install("ComplexHeatmap")
install.packages("circlize")
circlize
Combine_heatmap(acts_mat, neweset)
Combine_heatmap
?exprs
?lmFit
?eBayes
library(ComplexHeatmap)
library(Biobase)
Combine_heatmap(acts_mat, neweset)
tf_links = TF_Filter(acts_mat, hDB, miTh = .05, nbins = 8, corMethod = "spearman", DPI = T)
TF_Filter
install.packages("entropy")
library(devtools)
devtools::build_vignettes()
library(devtools)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
tf_links = TF_Filter(acts_mat, hDB, miTh = .05, nbins = 8, corMethod = "spearman", DPI = T)
library(NetAct)
library(NetAct)
data("hDB")
data("EMT")
compare_list = c("Early-Middle", "Middle-Late", "Early-Late")
DErslt = MicroProcess(neweset, compare_list)
gsearslt_1 = read.csv("vignettes/results_v3_1.csv")
gsearslt_2 = read.csv("vignettes/results_v3_2.csv")
gsearslt_3 = read.csv("vignettes/results_v3_3.csv")
gsearslts = list(gsearslt_1, gsearslt_2, gsearslt_3)
tfs = TF_Selection(gsearslts, qval = 0.01, compList = compare_list, ntop = NULL)
act.me <- TF_Activity(tfs, hDB, neweset, DErslt$Overall)
act.me$all_list
acts_mat = act.me$all_activities
Combine_heatmap(acts_mat, neweset)
tf_links = TF_Filter(acts_mat, hDB, miTh = .05, nbins = 8, corMethod = "spearman", DPI = T)
tf_links
cor(acts_mat["CTNNB1",], acts_mat["ZEB1",], method = "spearman")
dim(tf_links)
length(unique(c(tf_links$Source, tf_links$Target)))
unique(c(tf_links$Source, tf_links$Target))
"SNAI1" %in% unique(c(tf_links$Source, tf_links$Target))
plot_network_v(tf_links)
plot_network_v
plot_network_v = function(tf_links = tf_links){
require(visNetwork)
topology=data.frame(as.matrix(tf_links), stringsAsFactors = F)
node_list <- unique(c(topology[,1], topology[,2]))
nodes <- data.frame(id = node_list, label = node_list, font.size =30, value=c(rep(1,length(node_list))))
#nodes <- data.frame(id = node_list, label = node_list, font.size =30,shape='circle',value=c(rep(1,length(node_list))))
edge_col <- data.frame(c(1,2),c("blue","darkred"))
colnames(edge_col) <- c("relation", "color")
arrow_type <- data.frame(c(1,2),c("arrow","circle"))
colnames(arrow_type) <- c("type", "color")
edges <- data.frame(from =c(topology[,1]), to = c(topology[,2])
, arrows.to.type	=arrow_type$color[c(as.numeric(topology[,3]))]
, width = 3
, color = edge_col$color[c(as.numeric(topology[,3]))]
)
visNetwork(nodes, edges, height = "1000px", width = "100%") %>%
visEdges(arrows = "to") %>%
visOptions(manipulation = TRUE) %>%
visLayout(randomSeed = 123) %>%
visPhysics(solver = "forceAtlas2Based", stabilization = FALSE)
#  file  <- paste("network_",file,".html",sep="")
#  visSave(network, file = file, selfcontained = F)
}
dim(tf_links)
length(unique(c(tf_links$Source, tf_links$Target)))
unique(c(tf_links$Source, tf_links$Target))
"SNAI1" %in% unique(c(tf_links$Source, tf_links$Target))
plot_network_v(tf_links)
library(visNetwork)
install(visNetwork)
install.packages("visNetwork")
plot_network_v(tf_links)
plot_network_v(tf_links)
plot_network_v(tf_links)
tf_links = TF_Filter(acts_mat, hDB, miTh = .05, nbins = 8, corMethod = "spearman", DPI = T)
cor(acts_mat["CTNNB1",], acts_mat["ZEB1",], method = "spearman")
dim(tf_links)
length(unique(c(tf_links$Source, tf_links$Target)))
unique(c(tf_links$Source, tf_links$Target))
"SNAI1" %in% unique(c(tf_links$Source, tf_links$Target))
plot_network_v(tf_links)
unique(c(tf_links$Source, tf_links$Target))
"SNAI1" %in% unique(c(tf_links$Source, tf_links$Target))
shiny::includeHTML("EMT_Net.html")
shiny::includeHTML("vignettes/EMT_Net.html")
build_vignettes()
build_vignettes()
nodes <- unique(c(tf_links$Source, tf_links$Target))
#idenify DEs and non DEs
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
#identify DE and non DE targets
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- row.names(act.me$all_list[de.in.net[[i]]][[1]])
}
names(de.in.net.targets) <- de.in.net
nodes <- unique(c(tf_links$Source, tf_links$Target))
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
#identify DE and non DE targets
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- row.names(act.me$all_list[de.in.net[[i]]][[1]])
}
de.in.net
names(de.in.net.targets)
names(de.in.net.targets) <- de.in.net
dim(v )
dim(tf_links)
tf_links.emt
tf_links
de.in.net
library(NetAct)
data("hDB")
data("EMT")
compare_list = c("Early-Middle", "Middle-Late", "Early-Late")
DErslt = MicroProcess(neweset, compare_list)
DErslt
nodes <- unique(c(tf_links$Source, tf_links$Target))
#idenify DEs and non DEs
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
#identify DE and non DE targets
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- row.names(act.me$all_list[de.in.net[[i]]][[1]])
}
names(de.in.net.targets) <- de.in.net
de.in.net
de.in.net.targets
nodes <- unique(c(tf_links$Source, tf_links$Target))
#idenify DEs and non DEs
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
non.in.net
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
de.in.net
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- row.names(act.me$all_list[de.in.net[[i]]][[1]])
}
de.in.net.targets
load("NetAct_Data/tf_links.emt")
tf_links = TF_Filter(acts_mat, hDB, miTh = .05, nbins = 8, corMethod = "spearman", DPI = T)
cor(acts_mat["CTNNB1",], acts_mat["ZEB1",], method = "spearman")
dim(tf_links)
length(unique(c(tf_links$Source, tf_links$Target)))
unique(c(tf_links$Source, tf_links$Target))
"SNAI1" %in% unique(c(tf_links$Source, tf_links$Target))
plot_network_v(tf_links)
load("NetAct_Data/tf_links.emt")
plot_network_v(tf_links)
nodes <- unique(c(tf_links$Source, tf_links$Target))
#idenify DEs and non DEs
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
#identify DE and non DE targets
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- row.names(act.me$all_list[de.in.net[[i]]][[1]])
}
names(de.in.net.targets) <- de.in.net
de.in.net.targets
act.me
names(act.me)
act.me$all_list
de.in.net
i
i=1
row.names(act.me$all_list[de.in.net[[i]]][[1]])
act.me$all_list[de.in.net[[i]]]
act.me$all_list[de.in.net[[i]]][[1]]
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- names(act.me$all_list[de.in.net[[i]]][[1]])
}
de.in.net.targets
de.in.net
names(de.in.net.targets) <- de.in.net
non.in.net.targets <- vector(mode = "list", length = length(non.in.net))
for (i in 1:length(non.in.net)){
non.in.net.targets[[i]] <- names(act.me$all_list[non.in.net[[i]]][[1]])
}
names(non.in.net.targets) <- non.in.net
non.in.net.targets
ex.genes <- row.names(DErslt$Overall$table$AveExpr)
ex.genes
DErslt$Overall$table$AveExpr
a <- length(non.in.net)
b <- length(de.in.net)
C <- expand.grid(1:a, 1:b)
combos.vec <- vector(length = nrow(C))
o.mat <- as.data.frame(matrix(nrow = length(combos.vec), ncol = 10))
colnames(o.mat) <- c("pair", "tf1.targets", "tf2.targets", "tf1.non", "tf2.non", "A","B","C","D", "P.value")
o.mat
for (i in 1:nrow(C)){
combos.vec[[i]] <-paste(C[i,][[1]], C[i,][[2]], sep = " ")
}
combos.vec
P.mat <- matrix(nrow = length(non.in.net), ncol = length(de.in.net))
rownames(P.mat) <- non.in.net
colnames(P.mat) <- de.in.net
P.mat
ex.genes <- names(act.me$all_list)
for (i in 1:length(combos.vec)){
tf1 <- non.in.net[[as.integer(strsplit(combos.vec[[i]], split = " ")[[1]][1])]]
tf2 <-de.in.net[[as.integer(strsplit(combos.vec[[i]], split = " ")[[1]][2])]]
o.mat[i,1] <- paste0(tf1, " and ", tf2)
tf1.targets <- non.in.net.targets[[tf1]]
tf2.targets <- de.in.net.targets[[tf2]]
tf1.non <- setdiff(ex.genes, tf1.targets)
tf2.non <- setdiff(ex.genes, tf2.targets)
A <- length(intersect(tf1.targets, tf2.targets))
B <- length(intersect(tf1.targets, tf2.non))
C <- length(intersect(tf1.non, tf2.targets))
D <- length(intersect(tf1.non, tf2.non))
fish.mat <- matrix(c(A,C,B,D), nrow = 2, ncol=2)
#fish <- fisher.test(fish.mat)
fish <- fisher.test(fish.mat, alternative = "greater")
#fish <- fisher.test(fish.mat, alternative = "less")
o.mat[i,2] <- length(tf1.targets)
o.mat[i,3] <- length(tf2.targets)
o.mat[i,4] <- length(tf1.non)
o.mat[i,5] <- length(tf2.non)
o.mat[i,6] <- A
o.mat[i,7] <- B
o.mat[i,8] <- C
o.mat[i,9] <- D
o.mat[i,10] <- fish$p.value
P.mat[tf1,tf2] <- fish$p.value
}
P.mat <- t(P.mat)
P.mat <- as.data.frame(P.mat)
P.mat
o.mat
P.mat <- t(P.mat)
P.mat <- as.data.frame(P.mat)
fish.list <- vector(mode = "list")
for(i in 1:length(colnames(P.mat))){
tmp <-P.mat[,i]
names(tmp) <-rownames(P.mat)
tmp <- tmp[tmp < .05]
fish.list[[i]] <-names(tmp[order(tmp)])
}
length(fish.list)
names(fish.list) <- colnames(P.mat)
View(fish.list)
setdiff(names(fish.list),non.in.net)
lengths(fish.list)
names(fish.list)
NDE <- "CREBBP"
DE <-"CTNNB1"
sign(acts_mat[NDE,])
sign(acts_mat[DE,])
acts_mat[NDE,][sign(acts_mat[NDE,]) != sign(acts_mat[DE,])] <- -(acts_mat[NDE,][sign(acts_mat[NDE,]) != sign(acts_mat[DE,])])
Combine_heatmap(acts_mat, neweset)
acts_mat
row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]
non.in.net
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
non.in.net
nodes <- unique(c(tf_links$Source, tf_links$Target))
#idenify DEs and non DEs
non.DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val >= .05]]
non.in.net <- non.DEGs[non.DEGs %in% nodes]
DEGs <- row.names(acts_mat)[row.names(acts_mat) %in% row.names(DErslt$Overall$table)[DErslt$Overall$table$adj.P.Val < .05]]
de.in.net <- DEGs[DEGs %in% nodes]
#identify DE and non DE targets
de.in.net.targets <- vector(mode = "list", length = length(de.in.net))
for (i in 1:length(de.in.net)){
de.in.net.targets[[i]] <- names(act.me$all_list[de.in.net[[i]]][[1]])
}
names(de.in.net.targets) <- de.in.net
de.in.net.targets
act.me
act.me$all_activities
names(act.me$all_list)
a <- length(non.in.net)
b <- length(de.in.net)
C <- expand.grid(1:a, 1:b)
combos.vec <- vector(length = nrow(C))
o.mat <- as.data.frame(matrix(nrow = length(combos.vec), ncol = 10))
colnames(o.mat) <- c("pair", "tf1.targets", "tf2.targets", "tf1.non", "tf2.non", "A","B","C","D", "P.value")
for (i in 1:nrow(C)){
combos.vec[[i]] <-paste(C[i,][[1]], C[i,][[2]], sep = " ")
}
P.mat <- matrix(nrow = length(non.in.net), ncol = length(de.in.net))
rownames(P.mat) <- non.in.net
colnames(P.mat) <- de.in.net
ex.genes <- names(act.me$all_list)
ex.genes
P.mat
P.mat
o.mat
build_vignettes()
build_vignettes()
for (i in 1:length(combos.vec)){
tf1 <- non.in.net[[as.integer(strsplit(combos.vec[[i]], split = " ")[[1]][1])]]
tf2 <-de.in.net[[as.integer(strsplit(combos.vec[[i]], split = " ")[[1]][2])]]
o.mat[i,1] <- paste0(tf1, " and ", tf2)
tf1.targets <- non.in.net.targets[[tf1]]
tf2.targets <- de.in.net.targets[[tf2]]
tf1.non <- setdiff(ex.genes, tf1.targets)
tf2.non <- setdiff(ex.genes, tf2.targets)
A <- length(intersect(tf1.targets, tf2.targets))
B <- length(intersect(tf1.targets, tf2.non))
C <- length(intersect(tf1.non, tf2.targets))
D <- length(intersect(tf1.non, tf2.non))
fish.mat <- matrix(c(A,C,B,D), nrow = 2, ncol=2)
#fish <- fisher.test(fish.mat)
fish <- fisher.test(fish.mat, alternative = "greater")
#fish <- fisher.test(fish.mat, alternative = "less")
o.mat[i,2] <- length(tf1.targets)
o.mat[i,3] <- length(tf2.targets)
o.mat[i,4] <- length(tf1.non)
o.mat[i,5] <- length(tf2.non)
o.mat[i,6] <- A
o.mat[i,7] <- B
o.mat[i,8] <- C
o.mat[i,9] <- D
o.mat[i,10] <- fish$p.value
P.mat[tf1,tf2] <- fish$p.value
}
o.mat
P.mat
P.mat
o.mat
fish.list$BRCA1
fish.list$CREBBP
fish.list$E2F4
fish.list$ESR1
fish.list$HOXB7
fish.list$IRF9
fish.list$KLF4
fish.list$MYC
fish.list$PAX6
fish.list$RB1
fish.list$RELA
fish.list$SMAD2
fish.list$SMAD4
fish.list$SMAD7
fish.list$SNAI1
fish.list$SP1
fish.list$STAT3
fish.list$TFAP2A
fish.list$TP53
fish.list$TWIST1
fish.list$WT1
fish.list <- vector(mode = "list")
for(i in 1:length(colnames(P.mat))){
tmp <-P.mat[,i]
names(tmp) <-rownames(P.mat)
tmp <- tmp[tmp < .05]
fish.list[[i]] <-names(tmp[order(tmp)])
}
length(fish.list)
names(fish.list) <- colnames(P.mat)
View(fish.list)
setdiff(names(fish.list),non.in.net)
setdiff(names(fish.list),non.in.net)
setdiff(names(fish.list),non.in.net)
lengths(fish.list)
names(fish.list)
fish.list$BRCA1
fish.list$CREBBP
fish.list$E2F4
fish.list$ESR1
fish.list$HOXB7
fish.list$IRF9
fish.list$KLF4
fish.list$MYC
fish.list$PAX6
fish.list$RB1
fish.list$RELA
fish.list$SMAD2
fish.list$SMAD4
fish.list$SMAD7
fish.list$SNAI1
fish.list$SP1
fish.list$STAT3
fish.list$TFAP2A
fish.list$TP53
fish.list$TWIST1
fish.list$WT1
fish.list
fish.list$BRCA1
fish.list$CREBBP
fish.list$E2F4
fish.list$ESR1
fish.list$HOXB7
fish.list$IRF9
fish.list$KLF4
fish.list$MYC
fish.list$PAX6
fish.list$RB1
fish.list$RELA
fish.list
names(fish.list)
fish.list$SP1
NDE <- "CREBBP"
DE <-"CTNNB1"
sign(acts_mat[NDE,])
sign(acts_mat[DE,])
acts_mat[NDE,][sign(acts_mat[NDE,]) != sign(acts_mat[DE,])] <- -(acts_mat[NDE,][sign(acts_mat[NDE,]) != sign(acts_mat[DE,])])
NDE <- "TP53"
DE <-"HIF1A"
sign(acts_mat[NDE,])
sign(acts_mat[DE,])
acts_mat
Combine_heatmap(acts_mat, neweset)
build_vignettes()
library(devtools)
document()
